<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>